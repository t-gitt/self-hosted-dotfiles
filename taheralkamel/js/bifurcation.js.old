const width = 0.8;
const duration = 1.5;
const begin = 100;
const num = 300;
const end = begin + num;

let canvas = document.getElementById("canvas");
let ctx = canvas.getContext("2d");
canvas.style.height = `${window.innerHeight}px`;
canvas.style.width = `${window.innerWidth}px`;
canvas.height = window.innerHeight*2;
canvas.width = window.innerWidth*2;

// 3.8283698837280276 3.828369911193848
// 3.7441832682291665 3.7441837565104166
//xminArray = [3.1, 3.6619111, 3.6, 3.8]
//xmaxArray = [4, 3.6799119, 3.8, 4]
//3.5730674987157185, 3.573069175660875
xminArray = [3.8283698837280276, 3.1, 3.6, 3.8]
xmaxArray = [3.828369911193848, 4, 3.8, 4]
let randomIndex = Math.floor(Math.random() * xminArray.length)
let randomxMin = xminArray[randomIndex];
let randomxMax = xmaxArray[randomIndex];
let setup = {
  xMin:randomxMin,
  xMax:randomxMax,
  yMin:0,
  yMax:1
}

function* general_function(r,x){
  for(let i = 0; i < end; i++){
    x = r*x*(1-x);
    yield x;
  }
}
function scale([a,b,c,d,x]){
  return c + (x-a)/(b-a) * (d-c);
}

const speed = 60/duration;

let transp = 0.25;
let colors = ['rgba(255,0,0, '+transp+ ')', 'rgba(0,255,0,' +transp+ ')', 'rgba(0,0,255,'+ transp +')'];
function get_random_rgba(){
let randomIndex = Math.floor(Math.random() * colors.length);
return colors[randomIndex];
}

function draw(r,configs,recursive){
  let { yMin, yMax, xMin, xMax, step } = configs;
  return function(){
	coordinates.innerHTML = 'coordinates: [' + xMin+', ' + xMax + ']'
    for(let e = 0; e < speed; e++, r+=step){
      let t = general_function(r,0.5);
      for(let i = 0; i < begin; i++) t.next();
      ctx.beginPath();
      coordinates = document.getElementById("coordinates");
      for(let i of [...t]){
        let [x,y] = [[xMin,xMax,0,canvas.width,r],
                    [yMin,yMax,canvas.height,0,i]].map(scale);
        ctx.rect(x-width/2, y-width/2, width, width);
      }
	      ctx.fillStyle = "rgba(255,255,255,0.3)";
	      ctx.fill();
/*
      if (e%2 == 0){
	      ctx.fillStyle = "rgba(255,0,255,.25)";
	      ctx.fill();
	}else{
	      ctx.fillStyle = "rgba(0,255,0,.25)";
	      ctx.fill();
	}*/
//      ctx.fillStyle = get_random_rgba();
 //     ctx.fill();
    }
    if(r < xMax) {requestAnimationFrame(draw(r,configs,recursive))}
	    else if(recursive){
	      recursive(configs);
	    }
  }
}

function update(configs,recursive){
  ctx.clearRect(0,0,canvas.width,canvas.height);
  setup.step = scale([0,canvas.width,0,setup.xMax-setup.xMin,0.5]);
  requestAnimationFrame(draw(configs.xMin,configs,recursive));
}

let mouseUpListener;

function mouseUp(x1){
  return function(f){
    let [ xMin, xMax ] = [x1,f.screenX].map(x=>scale([0,window.innerWidth,   setup.xMin,setup.xMax,x])).sort();
    if(xMax-xMin < 1e-10) return;
    canvas.removeEventListener("mousedown",mouseDown);
    canvas.removeEventListener("mouseup",mouseUpListener);
    //xMin = Math.round(xMin * 10000) / 10000
    //xMax = ((xMax - xMin) * 10) + xMax
    console.log(xMin,xMax);
    setup.xMin = xMin;
    setup.xMax = xMax;
    //setup.xMax = xMin + 0.1;
    update(setup,function(){
      canvas.addEventListener("mousedown",mouseDown);
    });
  }
}

function mouseDown(e){
  let x1 = e.clientX;
  mouseUpListener = mouseUp(x1);
  canvas.addEventListener("mouseup",mouseUpListener)
}

function init(){
  update(setup,function(){
    canvas.addEventListener("mousedown",mouseDown);
  });
}

window.onload = init;

